#ifndef GLOBAL_H
#define GLOBAL_H

//MP_BGN_C_DECLS
//time
#include <time.h>
#include <sys/time.h>

//other header
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>
#include <iostream>
#include <stdio.h>

#include <fstream>
#include <sstream>
#include <sys/types.h>
#include <dirent.h>
#include <stdlib.h>

#include <stdarg.h>
#include <errno.h>
#include <pthread.h>
#include <fcntl.h>

//add opencv head
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv2/opencv.hpp>
#include <opencv2/opencv_modules.hpp>

#include "opencv2/core/core.hpp"
#include "opencv2/contrib/contrib.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/objdetect/objdetect.hpp"


typedef void                    mpVOID;
typedef bool                    mpBOOL;
typedef char                    mpCHAR;
typedef unsigned char           mpBYTE;
typedef int                     mpINT;
typedef unsigned int            mpUINT;
typedef long                    mpLONG;
typedef unsigned long           mpULONG;
typedef unsigned short          mpWORD;
typedef unsigned int            mpDWORD;
typedef unsigned long long      mpQWORD;
typedef float                   mpFLOAT;
typedef double                  mpDOUBLE;

using namespace std;
using namespace cv;

#define MP_MALLOC(s)            MP_Malloc(s)
#define MP_FREE(p)              MP_Free(p)

#define mpTRUE                  1
#define mpFALSE                 0
#define mpNULL                  0
#define FACE_CASCADE_DIR   		"./cascade/"
#define USLEEP_PARAMS_MS		1000


#define PRT_INFO(fmt, ...) MP_Log(__FILE__, __LINE__, __FUNCTION__, fmt, ##__VA_ARGS__)

typedef struct _tagLogTime
{
    struct tm logSec;
    mpINT logMSec;
} LogTime;

typedef struct
{
   char  serverIp[20];
   int   serverPort;
}OptConfig;

/**
 * @ingroup SUB_GROUP_LOG
 * @brief
 * @param   pszFile in which file
 * @param   iLine   in which line
 * @param   pFunction   in which function
 * @parma   format  output format
 */
mpVOID MP_Log(const mpCHAR * pszFile, mpINT iLine, const mpCHAR * pFunction,const mpCHAR * format, ...);


//MP_END_C_DECLS

#endif // GLOBALHEAD


